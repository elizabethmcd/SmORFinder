name: SmORFinder Tests (Docker)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Wait for Docker build to complete (if triggered)
      if: contains(github.event.head_commit.message, '[docker]') || contains(github.event.head_commit.message, '[rebuild]')
      run: |
        echo "Docker build was triggered, waiting 10 minutes for it to complete..."
        sleep 600
    
    - name: Install Python dependencies
      run: |
        pip install biopython click
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pull or Build Docker image
      run: |
        # Try to pull the latest image from GHCR, fallback to building locally
        if docker pull ghcr.io/elizabethmcd/smorfinder:main; then
          echo "Docker image pulled successfully from GHCR"
          docker tag ghcr.io/elizabethmcd/smorfinder:main ghcr.io/elizabethmcd/smorfinder:latest
        elif docker pull ghcr.io/elizabethmcd/smorfinder:latest; then
          echo "Docker image pulled successfully from GHCR (latest tag)"
        else
          echo "Image not found in GHCR, building locally..."
          docker build -t ghcr.io/elizabethmcd/smorfinder:latest .
        fi
    
    - name: List test files
      run: |
        echo "Available test genome files:"
        ls -la test/genome_files/
        echo "Checking for required files..."
        for genome in test/genome_files/*.fna; do
          if [ -f "$genome" ]; then
            genome_name=$(basename "$genome" .fna)
            echo "Found genome: $genome_name"
            if [ -f "test/genome_files/${genome_name}.faa" ] && [ -f "test/genome_files/${genome_name}.gff" ]; then
              echo "✓ All files present for $genome_name"
            else
              echo "✗ Missing .faa or .gff for $genome_name"
            fi
          fi
        done
    
    - name: Run tests on multiple genomes
      run: |
        # Test multiple genomes
        for genome in test/genome_files/*.fna; do
          if [ -f "$genome" ]; then
            genome_name=$(basename "$genome" .fna)
            echo "Testing genome: $genome_name"
            
            # Check if corresponding .faa and .gff files exist
            if [ -f "test/genome_files/${genome_name}.faa" ] && [ -f "test/genome_files/${genome_name}.gff" ]; then
              echo "Running standard workflow for $genome_name..."
              docker run --rm -v $(pwd)/test/genome_files:/data -v $(pwd)/test_output_${genome_name}_standard:/output ghcr.io/elizabethmcd/smorfinder:latest \
                bash -c "cd /data && smorf single ${genome_name}.fna --outdir /tmp/${genome_name} --force && cp -r /tmp/${genome_name}/* /output/"
              
              echo "Running protein workflow for $genome_name..."
              docker run --rm -v $(pwd)/test/genome_files:/data -v $(pwd)/test_output_${genome_name}_protein:/output ghcr.io/elizabethmcd/smorfinder:latest \
                bash -c "cd /data && smorf protein ${genome_name}.fna ${genome_name}.faa ${genome_name}.gff --outdir /tmp/${genome_name} --force && cp -r /tmp/${genome_name}/* /output/"
              
              echo "Comparing results for $genome_name..."
              python test/compare_results.py test_output_${genome_name}_standard test_output_${genome_name}_protein
            else
              echo "Skipping $genome_name (missing .faa or .gff files)"
            fi
          fi
        done
    
    - name: Show test output structure
      run: |
        echo "=== Test Output Structure ==="
        find test_output_* -name "*.faa" -o -name "*.tsv" | head -10
        echo "=== File sizes ==="
        du -h test_output_*
        echo "=== Directory contents ==="
        for dir in test_output_*; do
          if [ -d "$dir" ]; then
            echo "Contents of $dir:"
            ls -la "$dir"
          fi
        done
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-docker
        path: |
          test_output_*/
          test/genome_files/
          scripts/ 